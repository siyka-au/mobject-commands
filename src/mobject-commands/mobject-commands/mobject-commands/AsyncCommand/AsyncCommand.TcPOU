<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="AsyncCommand" Id="{167a49ad-66b7-036c-12b3-201b18025f30}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK PUBLIC ABSTRACT AsyncCommand EXTENDS Disposable IMPLEMENTS I_AsyncCommand
VAR
	stateMachine : AsyncCommandStateMachine;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
 Output   │ Idle     . Executing                                              . Stopped
──────────┼───────────────────────────────────────────────────────────────────────────────────
 State    │          .                                                        .
          │ ┌──────┐ . ┌──────────────┐  ┌───────────┐  ┌────────────┐        . ┌───────────┐
          │ │ Idle ├───► Initializing ├──► Executing ├──► Completing ├──────────► Completed │
          │ └──────┘ . └────┬─────────┘  └─────┬─────┘  └─────┬──────┘        . └───────────┘
          │          .      │                  │              │               .
          │          .      │                  │              │  ┌──────────┐ . ┌─────────┐
          │          .      │                  │              │  │ Aborting ├───► Aborted │
          │          .      │                  │              │  └────┬─────┘ . └─────────┘
          │          .      │                  │              │       |       .
          │          .      │                  │              │       │       . ┌──────────┐
          │          .      └──────────────────▼──────────────▼───────▼─────────► Errored  │
          │          .                                                        . └──────────┘
*)]]></ST>
    </Implementation>
    <Folder Name="Protected" Id="{85307ef1-af44-0248-0fab-eb879ad107a4}" />
    <Method Name="Abort" Id="{a0ee3453-a67e-0d75-280d-16ca0de9e3b1}">
      <Declaration><![CDATA[METHOD PUBLIC Abort]]></Declaration>
      <Implementation>
        <ST><![CDATA[stateMachine.Abort();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicCall" Id="{6854302e-2920-05d4-24af-826647146430}">
      <Declaration><![CDATA[METHOD PUBLIC CyclicCall]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF stateMachine.IsIdle THEN
	OnIdle();
END_IF

IF stateMachine.IsInitializing THEN
	OnInitializing(stateMachine);
END_IF

IF stateMachine.IsExecuting THEN
	OnExecuting(stateMachine);
END_IF

IF stateMachine.IsCompleting THEN
	OnCompleting(stateMachine);
END_IF

IF stateMachine.IsCompleted THEN
	OnCompleted();
END_IF

IF stateMachine.IsAborting THEN
	OnAborting(stateMachine);
END_IF

IF stateMachine.IsAborted THEN
	OnAborted();
END_IF

IF stateMachine.IsErrored THEN
	OnErrored();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Execute" Id="{646b209e-a0ed-4ac7-8918-d5b10d7fcfe9}">
      <Declaration><![CDATA[METHOD PUBLIC Execute]]></Declaration>
      <Implementation>
        <ST><![CDATA[stateMachine.Execute();]]></ST>
      </Implementation>
    </Method>
    <Property Name="Executing" Id="{9ef4397e-5594-0537-0a97-14aa93a4b51f}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY PUBLIC Executing : BOOL]]></Declaration>
      <Get Name="Get" Id="{8ff75693-55a4-0918-396a-e0523dbf2cb9}">
        <Declaration><![CDATA[PUBLIC]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF stateMachine.IsAborted THEN
	RETURN;
END_IF

IF stateMachine.IsCompleted THEN
	RETURN;
END_IF

IF stateMachine.IsErrored THEN
	RETURN;
END_IF

IF stateMachine.IsIdle THEN
	RETURN;
END_IF

Executing := TRUE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="GetResult" Id="{96d51ca3-aa3f-469f-a5c1-143242562d01}">
      <Declaration><![CDATA[METHOD PUBLIC GetResult : I_Result
VAR
	pResult : POINTER TO DefaultResult;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Stopped THEN
	RETURN;
END_IF

pResult := __NEW(DefaultResult(
	completed := stateMachine.IsCompleted,
	aborted := stateMachine.IsAborted,
	error := stateMachine.IsErrored,
	errorId := stateMachine.ErrorId
));

GetResult := pResult^;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Idle" Id="{bb15a0c8-ab74-4543-831a-51fac6dd9598}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY PUBLIC Idle : BOOL]]></Declaration>
      <Get Name="Get" Id="{2d51f53e-8efb-49f7-8716-071c0d32bfe5}">
        <Declaration><![CDATA[PUBLIC]]></Declaration>
        <Implementation>
          <ST><![CDATA[Idle := stateMachine.IsIdle;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="OnAborted" Id="{a161191a-5171-07e1-1d26-555c3baaff8a}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED OnAborted]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAborting" Id="{d7fd0d33-b736-0547-1fd6-5341b5070afe}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED OnAborting
VAR_INPUT
	stateControl : I_AsyncCommandStateControl;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// default behaviour is to go to next state
// you can override this method to implement your own completing control code.
// just call StateControl.Next() when your code is completed.  

stateControl.Next();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnCompleted" Id="{f38d45e0-70e2-040a-3005-476f66428176}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED OnCompleted : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnCompleting" Id="{d1957dcc-5026-0772-2ab8-861a5a1a286d}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED OnCompleting
VAR_INPUT
	stateControl : I_AsyncCommandStateControl;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// default behaviour is to go to next state
// you can override this method to implement your own completing control code.
// just call StateControl.Next() when your code is completed.  

stateControl.Next();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnErrored" Id="{e957eb3f-db39-0428-0e38-d504ae4abc07}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED OnErrored]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecuting" Id="{b0592078-a554-0fb1-1f2a-ed2aaf25ec2f}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED OnExecuting
VAR_INPUT
	stateControl : I_AsyncCommandStateControl;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// default behaviour is to go to next state
// you can override this method to implement your own executing control code.
// just call StateControl.Next() when your code is completed.  

stateControl.Next();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnIdle" Id="{617bed85-8a96-0694-0a4b-23410e7e287a}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED OnIdle]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnInitializing" Id="{96172a5e-3643-0b54-2a1a-aef3ad07f4b4}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED OnInitializing
VAR_INPUT
	stateControl : I_AsyncCommandStateControl;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// default behaviour is to go to next state
// you can override this method to implement your own initializing control code.
// just call StateControl.Next() when your code is completed.  

stateControl.Next();]]></ST>
      </Implementation>
    </Method>
    <Property Name="Stopped" Id="{b46f60cc-4791-470f-86f6-b7bf990d191e}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY PUBLIC Stopped : BOOL]]></Declaration>
      <Get Name="Get" Id="{6573ce8c-6cf9-4949-b251-1287bb38a9fc}">
        <Declaration><![CDATA[PUBLIC]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF stateMachine.IsIdle THEN
	RETURN;
END_IF

IF stateMachine.IsInitializing THEN
	RETURN;
END_IF

IF stateMachine.IsExecuting THEN
	RETURN;
END_IF

IF stateMachine.IsCompleting THEN
	RETURN;
END_IF

IF stateMachine.IsAborting THEN
	RETURN;
END_IF

Stopped := TRUE;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>